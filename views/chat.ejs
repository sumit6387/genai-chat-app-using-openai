<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Chat UI â€“ Vanilla HTML/CSS/JS</title>
  <style>
    :root {
      --bg: #0b0f14;
      --panel: #121821;
      --panel-2: #0e141c;
      --text: #e6eef8;
      --subtle: #9fb0c5;
      --accent: #4da3ff;
      --me: #1f6feb;
      --me-2: #215ec7;
      --bot: #24303f;
      --bot-2: #202a38;
      --border: #1d2633;
      --shadow: 0 8px 25px rgba(0,0,0,.35);
    }
    .light {
      --bg: #f5f7fb;
      --panel: #ffffff;
      --panel-2: #f2f5fa;
      --text: #0b1220;
      --subtle: #5a6b80;
      --accent: #0b6bcb;
      --me: #0b6bcb;
      --me-2: #0a5eaf;
      --bot: #eef3fa;
      --bot-2: #e7eef8;
      --border: #e3e8f0;
      --shadow: 0 12px 25px rgba(16,24,40,.08);
    }

    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0;
      font: 16px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      background: var(--bg);
      color: var(--text);
      display: grid;
      place-items: center;
    }

    .chat-shell {
      width: min(100%, 980px);
      height: min(92vh, 860px);
      background: var(--panel);
      border: 1px solid var(--border);
      border-radius: 20px;
      box-shadow: var(--shadow);
      display: grid;
      grid-template-rows: auto 1fr auto;
      overflow: hidden;
    }

    /* Header */
    .chat-header {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 14px 16px;
      border-bottom: 1px solid var(--border);
      background: linear-gradient(0deg, var(--panel) 0%, var(--panel-2) 100%);
    }
    .avatar {
      width: 36px; height: 36px; border-radius: 50%;
      background: linear-gradient(135deg, var(--accent), #6ed0ff);
      display: grid; place-items: center; color: white; font-weight: 700;
      flex: none;
    }
    .title {
      font-size: 15px; font-weight: 700;
    }
    .subtitle { color: var(--subtle); font-size: 13px; }
    .spacer { flex: 1; }
    .btn {
      appearance: none; border: 1px solid var(--border); background: var(--panel);
      color: var(--text); padding: 8px 10px; border-radius: 10px; cursor: pointer;
      display: inline-flex; align-items: center; gap: 8px; transition: .15s ease;
      box-shadow: 0 0 0 rgba(0,0,0,0);
    }
    .btn:hover { transform: translateY(-1px); box-shadow: 0 8px 18px rgba(0,0,0,.15); }

    /* Messages */
    .messages {
      padding: 20px 16px; overflow: auto; scroll-behavior: smooth;
      background: linear-gradient(180deg, var(--panel-2), var(--panel));
    }
    .day-divider { text-align: center; margin: 12px 0 20px; position: relative; color: var(--subtle); font-size: 12px; }
    .day-divider::before, .day-divider::after {
      content: ""; position: absolute; top: 50%; width: 36%; height: 1px; background: var(--border);
    }
    .day-divider::before { left: 0; }
    .day-divider::after { right: 0; }

    .msg {
      display: grid; grid-template-columns: 42px 1fr; gap: 10px; margin-bottom: 14px;
    }
    .msg.bot .bubble { background: linear-gradient(180deg, var(--bot), var(--bot-2)); border: 1px solid var(--border); }
    .msg.me { grid-template-columns: 1fr 42px; }
    .msg.me .bubble { background: linear-gradient(180deg, var(--me), var(--me-2)); color: #fff; justify-self: end; }
    .msg.me .meta { justify-self: end; text-align: right; }
    .msg .bubble {
      padding: 12px 14px; border-radius: 14px; max-width: 68ch; position: relative; word-wrap: break-word;
    }
    .meta { font-size: 11px; color: var(--subtle); margin-top: 6px; }
    .msg .avatar { width: 34px; height: 34px; font-size: 12px; }

    /* Input */
    .input-row {
      border-top: 1px solid var(--border);
      background: linear-gradient(180deg, var(--panel), var(--panel-2));
      padding: 10px;
    }
    .composer {
      display: grid; grid-template-columns: auto 1fr auto; gap: 10px; align-items: end;
      background: var(--panel); border: 1px solid var(--border); border-radius: 14px; padding: 8px;
    }
    .tools { display: flex; gap: 6px; }
    .icon-btn { width: 36px; height: 36px; border-radius: 10px; border: 1px solid var(--border); background: var(--panel-2); cursor: pointer; }
    textarea {
      resize: none; border: none; outline: none; background: transparent; color: var(--text);
      height: 36px; max-height: 144px; padding: 6px; font: inherit;
    }
    .send-btn { padding: 10px 14px; border-radius: 10px; border: none; cursor: pointer; font-weight: 700; background: var(--accent); color: white; }

    .typing { display: none; color: var(--subtle); font-size: 12px; margin: 6px 2px 0; }
    .typing.show { display: inline-block; }

    /* Small screens */
    @media (max-width: 640px) {
      .chat-shell { height: 100vh; border-radius: 0; }
      .msg .bubble { max-width: 100%; }
    }
  </style>
</head>
<body class="light">
  <section class="chat-shell" aria-label="Chat interface">
    <header class="chat-header" role="banner">
      <div class="avatar" aria-hidden="true">AI</div>
      <div>
        <div class="title">Aurora Assistant</div>
        <div class="subtitle" id="status">Online</div>
      </div>
      <div class="spacer"></div>
      <button id="themeToggle" class="btn" aria-pressed="false" title="Toggle light/dark">ðŸŒ— Theme</button>
      <button id="clearChat" class="btn" title="Clear conversation">ðŸ§¹ Clear</button>
    </header>

    <main id="messages" class="messages" aria-live="polite" aria-relevant="additions">
      <div class="day-divider">Today</div>
      <!-- Messages are injected here -->
    </main>

    <footer class="input-row" role="contentinfo">
      <div class="composer">
        <div class="tools">
          <button class="icon-btn" title="Attach (demo)">ðŸ“Ž</button>
          <button class="icon-btn" title="Emoji (demo)">ðŸ˜Š</button>
        </div>
        <textarea id="input" placeholder="Type a messageâ€¦ (Enter to send, Shift+Enter for new line)" aria-label="Message input"></textarea>
        <button id="send" class="send-btn" title="Send message">Send âž¤</button>
      </div>
      <div id="typing" class="typing" role="status" aria-live="polite">Aurora is typingâ€¦</div>
    </footer>
  </section>

  <script>
    const el = {
      body: document.body,
      list: document.getElementById('messages'),
      input: document.getElementById('input'),
      send: document.getElementById('send'),
      typing: document.getElementById('typing'),
      theme: document.getElementById('themeToggle'),
      clear: document.getElementById('clearChat'),
      status: document.getElementById('status'),
    };

    const STORAGE_KEY = 'vanilla-chat-history-v1';

    function timeNow() {
      const d = new Date();
      return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function saveHistory() {
      const html = el.list.innerHTML;
      localStorage.setItem(STORAGE_KEY, html);
    }

    function loadHistory() {
      const html = localStorage.getItem(STORAGE_KEY);
      if (html) {
        el.list.innerHTML = html;
        // Ensure ARIA region remains present
        if (!el.list.querySelector('.day-divider')) {
          const div = document.createElement('div');
          div.className = 'day-divider';
          div.textContent = 'Today';
          el.list.prepend(div);
        }
      } else {
        // greet
        addMessage('bot', `Hey there! I\'m <b>Aurora</b>. Ask me anything or just say hi âœ¨`);
      }
    }

    function addMessage(role, html) {
      const wrap = document.createElement('div');
      wrap.className = `msg ${role}`;

      const avatar = document.createElement('div');
      avatar.className = 'avatar';
      avatar.textContent = role === 'me' ? 'ME' : 'AI';

      const bubbleWrap = document.createElement('div');
      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.innerHTML = html;

      const meta = document.createElement('div');
      meta.className = 'meta';
      meta.textContent = timeNow();

      if (role === 'me') {
        bubbleWrap.appendChild(bubble);
        bubbleWrap.appendChild(meta);
        wrap.appendChild(bubbleWrap);
        wrap.appendChild(avatar);
      } else {
        wrap.appendChild(avatar);
        bubbleWrap.appendChild(bubble);
        bubbleWrap.appendChild(meta);
        wrap.appendChild(bubbleWrap);
      }

      el.list.appendChild(wrap);
      el.list.scrollTop = el.list.scrollHeight;
      saveHistory();
    }

    function sanitize(text) {
      // very small sanitizer for demo. Escapes HTML special chars.
      return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\"/g, '&quot;')
        .replace(/'/g, '&#039;');
    }

    function fakeBotReply(userText) {
      const responses = [
        "Got it! Here's what I think:",
        "Thanks for the message!",
        "Interestingâ€¦",
        "Let me reflect that back:",
        "Quick tip:",
      ];
      const tip = [
        "Press <b>Shift+Enter</b> for a new line.",
        "Toggle <b>light/dark</b> with the theme button.",
        "Your chat auto-saves locally.",
        "Click <b>ðŸ§¹ Clear</b> to reset the conversation.",
      ];
      const r = responses[Math.floor(Math.random()*responses.length)];
      const t = tip[Math.floor(Math.random()*tip.length)];
      return `${r} <br>${sanitize(userText)}<br><small>${t}</small>`;
    }

    function setTyping(on) {
      el.typing.classList.toggle('show', on);
      el.status.textContent = on ? 'Typingâ€¦' : 'Online';
    }

    // Send message
    function handleSend() {
      const raw = el.input.value.trim();
      if (!raw) return;
      const text = sanitize(raw);
      addMessage('me', text.replace(/\n/g, '<br>'));
      el.input.value = '';
      el.input.style.height = '36px';

      setTyping(true);
      fetch("/", {
        method: "POST",
        headers: {
        'Content-Type': 'application/json'
    },
        body: JSON.stringify({
            userInput: text
        })
      }).then(async (data) => {
        const response = await data.json();
            addMessage('bot', response.data);
            setTyping(false);
      });
    }

    // Auto-grow textarea
    function autoGrow() {
      this.style.height = '36px';
      this.style.height = Math.min(this.scrollHeight, 144) + 'px';
    }

    // Theme toggle
    function toggleTheme() {
      const light = el.body.classList.toggle('light');
      el.theme.setAttribute('aria-pressed', String(light));
      localStorage.setItem('chat-theme', light ? 'light' : 'dark');
    }

    function restoreTheme() {
      const t = localStorage.getItem('chat-theme') || 'light';
      el.body.classList.toggle('light', t === 'light');
      el.theme.setAttribute('aria-pressed', String(t === 'light'));
    }

    // Clear chat
    function clearChat() {
      localStorage.removeItem(STORAGE_KEY);
      el.list.innerHTML = '<div class="day-divider">Today</div>';
      addMessage('bot', 'Chat cleared. How can I help now?');
    }

    // Keyboard handling
    el.input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        handleSend();
      }
    });

    // Events
    el.send.addEventListener('click', handleSend);
    el.input.addEventListener('input', autoGrow);
    el.theme.addEventListener('click', toggleTheme);
    el.clear.addEventListener('click', clearChat);

    // Init
    restoreTheme();
    loadHistory();
  </script>
</body>
</html>
